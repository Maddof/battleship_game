{"version":3,"file":"main.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;ACAwD;AACM;AAC/B;;AAE/B;AACA;;AAEA,wBAAwB,wCAAI;AAC5B,uBAAuB,wCAAI;AAC3B,0BAA0B,wCAAI;AAC9B,0BAA0B,wCAAI;AAC9B,2BAA2B,wCAAI;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE,gDAAU;AACZ,EAAE,mDAAW;AACb,EAAE,gDAAU;AACZ,EAAE,mDAAW;AACb;;AAEA;AACA;AACA,EAAE,yDAAe;AACjB,EAAE,6DAAiB;AACnB;;AAE6C;;;;;;;;;;;;;;;;;;ACpCd;AACsB;AAChB;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;;AAEA,oBAAoB,UAAU;AAC9B;AACA,sBAAsB,aAAa;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,wCAAI;AACzB;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,wCAAI;AACzB;AACA,sBAAsB,YAAY;AAClC;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;AACA;AACA,MAAM;AACN;AACA,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,8CAAW;AACf;AACA;AACA;AACA;AACA;AACA,4BAA4B,kEAAgB;AAC5C;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,oCAAoC,wCAAI;AACxC;AACA,6BAA6B,MAAM,GAAG;AACtC;AACA,MAAM;AACN;AACA,gCAAgC,MAAM;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEqB;;;;;;;;;;;;;;;AC5HrB;;AAEO;AACP;AACA;;;;;;;;;;;;;;;;ACJwC;;AAExC;AACA;AACA,qBAAqB,iDAAS;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEkB;;;;;;;;;;;;;;;AChClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEgB;;;;;;;;;;;;;;;;;;;ACnBmB;AACgB;;AAEnD;;AAEA,sBAAsB,4CAAM;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,gDAAU;AACjC;AACA;AACA,IAAI;AACJ;AACA;AACA,0DAA0D;;AAE1D,MAAM,gDAAU;AAChB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,EAAE,oDAAU;AACZ;;AAEuD;;;;;;;;;;;;;;;;;;;;ACpDC;AACV;AACX;;AAEnC;AACA;;AAEA,qBAAqB,4CAAM;;AAE3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,yCAAyC,mDAAW;AACpD,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,OAAO,mDAAW;;AAEtB,mCAAmC,YAAY,IAAI,YAAY;;AAE/D,iBAAiB,mDAAW;;AAE5B;AACA,gBAAgB,YAAY,aAAa,YAAY;AACrD;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA,MAAM,mDAAW;AACjB;AACA;AACA;AACA,MAAM,gDAAS;AACf,MAAM,gDAAS;AACf,KAAK;AACL;AACA;;AAEmD;;;;;;;UCnEnD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;ACN2C;;AAEtB;;AAErB;;AAEA;AACA;AACA,EAAE,wDAAS;AACX;AACA,CAAC;;AAED,wDAAS","sources":["webpack://battleship/./src/style.css?e320","webpack://battleship/./src/modules/game.js","webpack://battleship/./src/modules/gameboard.js","webpack://battleship/./src/modules/helperfunctions.js","webpack://battleship/./src/modules/players.js","webpack://battleship/./src/modules/ships.js","webpack://battleship/./src/modules/ui_ player.js","webpack://battleship/./src/modules/ui_comp.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","import { renderCompBoard, compPlayer } from \"./ui_comp\";\nimport { renderPlayerBoard, humanPlayer } from \"./ui_ player\";\nimport { Ship } from \"./ships\";\n\nconst compBoardWrapper = document.querySelector(\".comp_board\");\nconst playerBoardWrapper = document.querySelector(\".player_board\");\n\nconst carrierShip = new Ship(5);\nconst battleShip = new Ship(4);\nconst destroyerShip = new Ship(3);\nconst submarineShip = new Ship(3);\nconst patrolboatShip = new Ship(2);\n\nconst shipsGlobal = [\n  carrierShip,\n  battleShip,\n  destroyerShip,\n  submarineShip,\n  patrolboatShip,\n];\n\nfunction resetGame() {\n  compBoardWrapper.innerHTML = \"\";\n  playerBoardWrapper.innerHTML = \"\";\n  compPlayer.winner = false;\n  humanPlayer.winner = false;\n  compPlayer.board.resetBoard();\n  humanPlayer.board.resetBoard();\n}\n\nfunction startGame() {\n  resetGame();\n  renderCompBoard();\n  renderPlayerBoard();\n}\n\nexport { resetGame, startGame, shipsGlobal };\n","import { Ship } from \"./ships\";\nimport { getRandomBoolean } from \"./helperfunctions\";\nimport { shipsGlobal } from \"./game\";\n\nclass Gameboard {\n  constructor() {\n    this.board = this.createBoard();\n    this.ships = [];\n    this.missedAttacks = [];\n    this.hitAttacks = [];\n  }\n  createBoard() {\n    const rows = 10;\n    const columns = 10;\n    const cellContent = null; // Using null to represent an empty cell\n    const board = [];\n\n    for (let i = 0; i < rows; i++) {\n      board[i] = [];\n      for (let j = 0; j < columns; j++) {\n        board[i][j] = cellContent;\n      }\n    }\n    return board;\n  }\n\n  createShip(length) {\n    const ship = new Ship(length);\n    this.ships.push(ship);\n  }\n\n  // Places and checks if it can place a ship\n  // Returns true if placed\n\n  placeShip(length, startX, startY, isHorizontal) {\n    const ship = new Ship(length);\n    if (this.canPlaceShip(length, startX, startY, isHorizontal)) {\n      for (let i = 0; i < length; i++) {\n        if (isHorizontal) {\n          this.board[startY][startX + i] = ship;\n        } else {\n          this.board[startY + i][startX] = ship;\n        }\n      }\n      this.ships.push(ship);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  canPlaceShip(length, startX, startY, isHorizontal) {\n    if (isHorizontal) {\n      // If it exceeds the gameboard return false\n      if (startX + length > 10) return false;\n      for (let i = 0; i < length; i++) {\n        if (this.board[startY][startX + i] !== null) return false;\n      }\n    } else {\n      if (startY + length > 10) return false;\n      for (let i = 0; i < length; i++) {\n        if (this.board[startY + i][startX] !== null) return false;\n      }\n    }\n    return true;\n  }\n\n  randomPlaceAllShips() {\n    // Randomly places all 5 types of ships on the board\n    let shipLength;\n    let x;\n    let y;\n    let randomOrientation;\n\n    shipsGlobal.forEach((ship) => {\n      let placed = false;\n      while (!placed) {\n        shipLength = ship.length;\n        x = Math.floor(Math.random() * 10);\n        y = Math.floor(Math.random() * 10);\n        randomOrientation = getRandomBoolean();\n        if (this.canPlaceShip(shipLength, x, y, randomOrientation)) {\n          this.placeShip(shipLength, x, y, randomOrientation);\n          placed = true;\n        } else {\n          placed = false;\n        }\n      }\n    });\n  }\n\n  receiveAttack(x, y) {\n    if (this.board[y][x] instanceof Ship) {\n      this.board[y][x].hit();\n      this.hitAttacks.push({ x, y }); // Add to hit coordinates\n      return true;\n    } else {\n      this.board[y][x] = \"miss\";\n      this.missedAttacks.push({ x, y });\n      return false;\n    }\n  }\n\n  allShipsSunk() {\n    if (this.ships.every((ship) => ship.sunk) == false) {\n      return false;\n    } else return true;\n  }\n\n  resetBoard() {\n    this.ships.length = 0;\n    this.missedAttacks.length = 0;\n    this.hitAttacks.length = 0;\n    this.board = this.createBoard(); // Reset the board\n  }\n\n  isAlreadyAttacked(x, y) {\n    return (\n      this.missedAttacks.some((attack) => attack.x === x && attack.y === y) ||\n      this.hitAttacks.some((attack) => attack.x === x && attack.y === y)\n    );\n  }\n}\n\nexport { Gameboard };\n","// Returns true or false 50:50 chance\n\nexport function getRandomBoolean() {\n  return Math.random() >= 0.5;\n}\n","import { Gameboard } from \"./gameboard\";\n\nclass Player {\n  constructor() {\n    this.board = new Gameboard();\n    this.winner = false;\n  }\n  // get board() {\n  //   return this.board.board;\n  // }\n\n  // placeShip(length, x, y, isHorizontal) {\n  //   return this.gameboard.placeShip(length, x, y, isHorizontal);\n  // }\n\n  // receiveAttack(x, y) {\n  //   return this.gameboard.receiveAttack(x, y);\n  // }\n\n  // allShipsSunk() {\n  //   return this.gameboard.allShipsSunk();\n  // }\n\n  // resetBoard() {\n  //   this.gameboard.resetBoard();\n  // }\n\n  // isAlreadyAttacked(x, y) {\n  //   return this.gameboard.isAlreadyAttacked(x, y);\n  // }\n}\n\nexport { Player };\n","class Ship {\n  constructor(length, hits = 0, sunk = false) {\n    this.length = length;\n    this.hits = hits;\n    this.sunk = sunk;\n  }\n  hit() {\n    this.hits += 1;\n    if (this.hits >= this.length) {\n      this.sunk = true;\n    }\n  }\n  isSunk() {\n    if (this.hits >= this.length) return true;\n    else return false;\n    //return this.sunk;\n  }\n}\n\nexport { Ship };\n","import { Player } from \"./players\";\nimport { compPlayer, compAttack } from \"./ui_comp\";\n\nconst playerBoardWrapper = document.querySelector(\".player_board\");\n\nlet humanPlayer = new Player();\n\nfunction renderPlayerBoard() {\n  humanPlayer.board.randomPlaceAllShips();\n  // placePlayerShips();\n  humanPlayer.board.board.forEach((row, y) => {\n    row.forEach((cell, x) => {\n      const gridCell = document.createElement(\"div\");\n      gridCell.classList.add(\"player-cell\");\n      gridCell.dataset.x = x;\n      gridCell.dataset.y = y;\n\n      playerBoardWrapper.appendChild(gridCell);\n\n      if (cell !== null) {\n        gridCell.classList.add(\"player-cell-ship\");\n      }\n    });\n  });\n}\n\n// Function to handle cell click event\nconst playerClick = (event) => {\n  const x = parseInt(event.target.dataset.x);\n  const y = parseInt(event.target.dataset.y);\n  const attackResult = compPlayer.board.receiveAttack(x, y);\n  if (attackResult) {\n    event.target.classList.add(\"hit\");\n  } else {\n    event.target.classList.add(\"miss\");\n  }\n  event.target.removeEventListener(\"click\", playerClick); // Remove event listener after click to prevent re-click\n\n  if (compPlayer.board.allShipsSunk()) {\n    console.log(\"All comp ships sunk\");\n    humanPlayer.winner = true;\n    setTimeout(() => {\n      resetGame();\n      startGame();\n    }, 1000);\n    // We return early so computer dont get another hit off after loosing\n    return;\n  }\n  // Return attack by computer defined in ui_comp.js\n  compAttack();\n};\n\nexport { renderPlayerBoard, humanPlayer, playerClick };\n","import { humanPlayer, playerClick } from \"./ui_ player\";\nimport { resetGame, startGame } from \"./game\";\nimport { Player } from \"./players\";\n\nconst compBoardWrapper = document.querySelector(\".comp_board\");\nconst playerBoardWrapper = document.querySelector(\".player_board\");\n\nvar compPlayer = new Player();\n\nfunction renderCompBoard() {\n  compPlayer.board.randomPlaceAllShips();\n\n  compPlayer.board.board.forEach((row, y) => {\n    row.forEach((cell, x) => {\n      const gridCell = document.createElement(\"div\");\n      gridCell.classList.add(\"comp-cell\");\n      gridCell.dataset.x = x;\n      gridCell.dataset.y = y;\n\n      compBoardWrapper.appendChild(gridCell);\n\n      // if (cell !== null) {\n      //   gridCell.classList.add(\"test-class\");\n      // }\n\n      // Add event listener to handle player action\n      gridCell.addEventListener(\"click\", playerClick);\n    });\n  });\n}\n\nfunction compAttack() {\n  console.log(\"computer attacks...\");\n  let compXAttack;\n  let compYAttack;\n  let attackResult;\n\n  // Ensure unique attacks\n  do {\n    compXAttack = Math.floor(Math.random() * 10);\n    compYAttack = Math.floor(Math.random() * 10);\n  } while (humanPlayer.board.isAlreadyAttacked(compXAttack, compYAttack));\n\n  console.log(`Computer attacks (${compXAttack}, ${compYAttack})`);\n\n  attackResult = humanPlayer.board.receiveAttack(compXAttack, compYAttack);\n\n  const attackedCell = playerBoardWrapper.querySelector(\n    `[data-x=\"${compXAttack}\"][data-y=\"${compYAttack}\"]`\n  );\n\n  if (attackResult) {\n    attackedCell.classList.add(\"hit\");\n  } else {\n    attackedCell.classList.add(\"miss\");\n  }\n\n  if (humanPlayer.board.allShipsSunk()) {\n    console.log(\"All player ships have been sunk. Computer wins!\");\n    compPlayer.winner = true;\n    setTimeout(() => {\n      resetGame();\n      startGame();\n    }, 1000);\n  }\n}\n\nexport { renderCompBoard, compPlayer, compAttack };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { startGame } from \"./modules/game\";\n\nimport \"./style.css\";\n\nconst startButton = document.getElementById(\"startbutton\");\n\nstartButton.addEventListener(\"click\", (e) => {\n  e.preventDefault();\n  startGame();\n  console.log(\"clicked the start button\");\n});\n\nstartGame();\n"],"names":[],"sourceRoot":""}